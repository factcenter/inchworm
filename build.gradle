/*
 *  Build file for Inchworm
 */

plugins {
    id "us.kirchmeier.capsule" version "1.0.1"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

apply plugin: 'maven'
apply plugin: 'signing'


// Set to false if you want to generate a release version
ext { isSnapshot = false }


description = 'Secure computation, one step at a time.'

version = "0.8.0"

ext {
    groupId = 'org.factcenter.inchworm'
    url = 'https://github.com/factcenter/inchworm'
    license = [
            name: 'MIT License',
            url: 'http://www.opensource.org/licenses/mit-license.php'
    ]
    developers = [
            [
                    name: 'Tal Moran',
                    email: 'talm@factcenter.org',
                    organization: 'FACT Center',
                    organizationUrl: 'http://factcenter.org/'
            ]
    ]
    scm = [
            connection: 'scm:https://github.com/factcenter/inchworm.git',
            developerConnection: 'scm:https://github.com/factcenter/inchworm.git',
            url: project.url,
    ]
}


mainClassName = "org.factcenter.inchworm.app.Run"



/*===================================
 *        Dependencies
 *===================================*/


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime 'ch.qos.logback:logback-core:1.1.2'

    compile 'org.antlr:antlr-runtime:3.5.2'

    compile 'org.apache.commons:commons-exec:1.1'
    compile 'org.apache.commons:commons-io:1.3.2'

    compile 'net.sf.jopt-simple:jopt-simple:4.6'

    // Crypto
    compile "org.factcenter.qilin:qilin:1.2.0"
    compile 'org.bouncycastle:bcprov-jdk15on:1.53'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'

    runtime 'org.codehaus.groovy:groovy:2.4.5' // For logback.groovy parsing

    compile 'jline:jline:2.11'
}


/*==== You probably don't have to edit below this line =======*/

version += "${isSnapshot ? '-SNAPSHOT' : ''}"

ext {
    snapshotPublicationRepository = "https://oss.sonatype.org/content/repositories/snapshots/"
    releasePublicationRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

    // Credentials for publication repositories (needed only for publishing)
    // Should be set in ${HOME}/.gradle/gradle.properties
    ossrhUser =  project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
    osshrPassword = project.hasProperty('osshrPassword') ? project.property('osshrPassword') : ""
}

// Used to generate initial maven-dir layout
task "create-dirs" { description = "Create default maven directory structure" } << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}


/*===================================
 *        "Fat" Build targets
 *===================================*/

task mavenCapsule(type: MavenCapsule){
    description = "Generate a capsule jar that automatically downloads and caches dependencies when run."
    applicationClass mainClassName
    destinationDir = buildDir
}

task fatCapsule(type: FatCapsule){
    description = "Generate a single capsule jar containing everything. Use -Pfatmain=... to override main class"

    destinationDir = buildDir

    def fatMain = project.hasProperty('fatmain') ? fatmain : mainClassName

    applicationClass fatMain

    def testJar = project.hasProperty('test')

    if (fatMain != mainClassName) {
        appendix = "fat-${fatMain}"
    } else {
        appendix = "fat"
    }

    if (testJar) {
        from sourceSets.test.output
    }
}


/*===================================
 *        ANTLR
 *===================================*/

String relativePath(pathPattern, path) {
    String relPath = project.relativePath(path)
    return relPath.replaceFirst(pathPattern, '')
}

import java.util.regex.Pattern

configurations {
    antlr3 {
        ext.srcDir = "src/main/antlr"
        ext.outputDir = file("$buildDir/generated-src")

        ext.pathPattern = ~('^'+
                        Pattern.quote(srcDir)+
                        '/?'
                        )
        ext.relativePath = { path ->
                relativePath(pathPattern, path)
        }
    }
}
dependencies { antlr3 'org.antlr:antlr:3.5+' }
task antlr(type:JavaExec) {
    description = 'Generates java sources from ANTLR'
    workingDir = configurations.antlr3.srcDir
    ext.sources = fileTree(dir: workingDir,
    include: '**/*.g')

    ext.outputDir = configurations.antlr3.outputDir

    doFirst {
            outputDir.exists() || outputDir.mkdirs()
    }

    classpath = configurations.antlr3
    main = 'org.antlr.Tool'


    args = [
            '-verbose',
            '-make',
            '-o',
            outputDir
    ]
    for (src in sources.getFiles()) {
            //args += configurations.antlr3.relativePath(src)
            args += file(src)
    }
}
tasks.compileJava.dependsOn(antlr)

sourceSets {
    main {
        java {
            srcDirs += [
                configurations.antlr3.outputDir
            ]
        }
    }
}

/*===================================
 *        Testing definitions
 *===================================*/
test {
    testLogging { // Show that tests are run in the command-line output
        events 'started', 'passed' 
    }


    useJUnit {
        excludeCategories (
            'test.categories.Integration',
            'test.categories.Slow',
            'test.categories.KnownBad'
        )
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    description = "Run integration tests"
    testLogging { events 'started', 'passed' }

    useJUnit {
        includeCategories 'test.categories.Integration'
        excludeCategories 'test.categories.KnownBad'
    }
}


configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    integTestCompile sourceSets.main.output
    integTestCompile sourceSets.test.output
}


// Library should generate Java 7-compatible bytecode
sourceCompatibility = 1.7
targetCompatibility = 1.7



/*===============================================
 *        Jars containing tests, javadoc, sources
 *===============================================*/

configurations {
    tests
}

task testsJar(type: Jar) {
    classifier 'tests'
    from sourceSets.test.output
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
    archives testsJar
    tests testsJar
}


/*===================================
 *        IDE Integration
 *===================================*/
idea {
    module {
        sourceDirs += configurations.antlr3.outputDir
        generatedSourceDirs += configurations.antlr3.outputDir
        // Don't exclude build directory
        excludeDirs -= file(buildDir)
    }
}



/*===================================
 *        Repositories
 *===================================*/

repositories {
    // Try local repository first
    mavenLocal()

    // Use 'maven central' for other dependencies.
    mavenCentral()

    // Sonatype repository (for snapshots and not-yet-synced versions)
    if (isSnapshot) {
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
}

task "info" << {
    println "Project: ${project.name}"
    println "Description: ${project.description}"
    println "--------------------------"
    println "GroupId: $groupId"
    println "Version: $version (${isSnapshot ? 'snapshot' : 'release'})"
    println ""
}
info.description 'Print some information about project parameters'


/*===================================
 *        Publishing
 *===================================*/
if (ossrhUser != "") {
    uploadArchives {
        repositories {

            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: releasePublicationRepository) {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                snapshotRepository(url: snapshotPublicationRepository) {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                pom.project {
                    name "${project.groupId}:${project.name}"
                    groupId project.groupId
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description project.description
                    url project.url

                    scm {
                        connection project.scm.connection
                        developerConnection project.scm.developerConnection
                        url project.scm.url
                    }

                    licenses {
                        license {
                            name project.license.name
                            url project.license.url
                        }
                    }

                    developers {
                        project.developers.each { dev  ->
                            developer {
                                name dev.name
                                email dev.email
                                organization dev.organization
                                organizationUrl dev.organizationUrl
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}


gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if (!project.hasProperty('signing.secretKeyRingFile')) {
            ext."signing.secretKeyRingFile" = file("${System.properties['user.home']}/.gnupg/secring.gpg")
            logger.info("Using default GPG keyring: {}", ext."signing.secretKeyRingFile" )
        }
    }
}





